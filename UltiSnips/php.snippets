extends html

snippet kv
'${1:${VISUAL}}' => '${2:$1}'
endsnippet

snippet dd
dd(${1:${VISUAL}}${2:->toArray()});
endsnippet

snippet @p
@php
  $0
@endphp
endsnippet

snippet du
dump(${1:${VISUAL}}${2:->toArray()});
endsnippet

snippet dr
dump($request->toArray());
endsnippet

snippet tad "toArray"
dd(${1:${VISUAL}}->toArray());
endsnippet

snippet ta "toArray" i
${1:${VISUAL}}->toArray()
endsnippet

snippet ts "toSql" i
${1:${VISUAL}}->toSql()
endsnippet


snippet hcv "html comment"
<!-- ${VISUAL} -->
endsnippet

snippet pl "expand p to full php"
<?php $1 ?>
endsnippet


snippet php "expand p to full php"
<?php
$0
endsnippet

snippet lrg "la4 get route"
Route::get('$1',function()
{
	return $0;
});
endsnippet

snippet sfun "Function"
public static function $1()
{
	$0
}
endsnippet

snippet qfun "Query Function"
function ($query) {
	$0
}
endsnippet

snippet psfun "Function"
private static function $1()
{
	$0
}
endsnippet

snippet fun "Function"
public function $1()
{
	$0
}
endsnippet

snippet if "If"
if ($1) {
	$0
}
endsnippet

snippet guarded "model guarded attribute"
protected $guarded = [
	$0,
	];
endsnippet

snippet fillable "model fillable attribute"
protected $fillable = [
	$0,
	];
endsnippet

snippet belongsTo "model belongsTo Relationship"
public function ${1:model} ()
{
	return $this->belongsTo(\App\\${1/\w+\s*/\u$0/g}::class);
}
$0
endsnippet

snippet belongsToMany "model belongsTo Relationship"
public function ${1:model}s ()
{
	return $this->belongsToMany(\App\\${1/\w+\s*/\u$0/g}::class);
}
$0
endsnippet

snippet hasMany "model hasMany Relationship"
public function ${1:model}s ()
{
	return $this->hasMany(\App\\${1/\w+\s*/\u$0/g}::class);
}
$0
endsnippet

snippet null "migration nullable" i
->nullable()$0
endsnippet

snippet def "migration default" i
->default('$1')$0
endsnippet

snippet minc "migration increments field"
$table->increments('${1:id}')$0;
endsnippet

snippet mtext "migration text field"
$table->text('${1:name}')$0;
endsnippet

snippet mstr "migration string field"
$table->string('${1:name}')$0;
endsnippet

snippet menum "migration enum field"
$table->enum('${1:name}', ['${2:options1}', ])$0;
endsnippet

snippet mbool "migration boolean field"
$table->boolean('${1:isTrue}')$0;
endsnippet

snippet mdec "migration decimal field"
$table->decimal('${1:money}', ${2:12,2})$0;
endsnippet

snippet mdate "migration date field"
$table->date('${1:date}')$0;
endsnippet

snippet mint "migration integer field"
$table->integer('${1:quantity}')$0;
endsnippet

snippet muint "migration unsigned integer field"
$table->unsignedInteger('${1:name}')$0;
endsnippet

snippet mtimestamp "migration timestamps"
$table->timestamps();
$0
endsnippet

snippet foreign "migration foreign"
$table->unsignedInteger('${1:name}');
$table->foreign('$1')
	->references('$2')
	->on('$3')
	${4:->onDelete('cascade')}$0;
endsnippet

snippet pfun "Function"
private function $1($2)
{
	$0
}
endsnippet

snippet lvm "la4 make view"
return View::make('${VISUAL:ViewFile}');
endsnippet

snippet tra "la4 translate sledction" i
{{ trans('kur.`!p
snip.rv = snip.v.text.lower()
`') }}
endsnippet

snippet fv "Fold code Visualy"
//{{{ $1
${VISUAL:Your Code}
//}}}_${1/(\w+).*/$1/}
endsnippet

snippet hc "HTML Comment"
<!-- ${1:end of }$0 -->
endsnippet

snippet lrvm "la4 make view"
return View::make('${VISUAL:ViewFile}');
$0
endsnippet

snippet arr "Create a non-assigned array"
array(${1:'on'=>'post'}$2)$0
endsnippet

snippet lrg "Laravel 4: Route::get()"
Route::get(${1:$pattern}, ${2:$action});
endsnippet

snippet csrf "cross site script attacks" b
/**
 * Prevent cross site script attacks
 */
public function __construct()
{
  $this->beforeFilter(${1:'csrf', array(${2:'on'=>'post'})});
}
$0
endsnippet

snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
$0
}
endsnippet

snippet wow
${1:Text}`!p snip.rv = (75-2*len(t[1]))*' '+t[1].upper()`
endsnippet

global !p
def upper_right(inp):
    return (75 - 2 * len(inp))*' ' + inp.upper()
endglobal

snippet wow
${1:Text}`!p snip.rv = upper_right(t[1])`
endsnippet

snippet '\[' "Recursive rule" r
[${1:&}] ${0}
endsnippet

snippet cond
${1:some_text}${1/(o)|(t)|..*/(?1:ne)(?2:wo)/}
endsnippet

snippet printf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet  ca
array(${1:'on'=>'post'$2}${1/([^,])*(,)?.*/(?2: :\);)/}$3${1/([^,])*(,)?.*/(?2:\);)/}
endsnippet

global !p
def ins1(t1, t2):
  return t2 if t1 else ''
endglobal

snippet def2 "def"
def ${1:${VISUAL:foo}}
{${2}} `!p snip.rv=ins1(t[3], '{')`$3`!p snip.rv=ins1(t[3], '}')` `!p snip.rv=ins1(t[4], '{')`$4`!p snip.rv=ins1(t[4], '}')`
$0
endsnippet

snippet bn "test Python"
`!p snip.rv=snip.basename`
endsnippet

snippet wfr "Wrap form controls in a row"
<div id="row_$1" class="row col-md-12">
	${VISUAL}
</div> <!-- end of row_$1 -->
endsnippet

snippet wff "Wrap form controls in a field"
<div class="col-md-$0 rtl">
	${VISUAL}
</div>
endsnippet

snippet div "Wrap in a DIV"
<div ${1:class="$2"}>
	${VISUAL}
</div>
endsnippet

snippet path "file path" !b
`!p snip.rv=path`
endsnippet

snippet ffv "Fold function Visually" !b
$0`!p
import re

def get_line(str, i):
	return str.split('\n', 1)[i]

def get_php_function_name(str):
	first_line = get_line(str, 0)
	m = re.search(r"(\w+)\(", first_line)
	return m.groups()[0]

def get_php_function_signature(str):
	first_line = get_line(str, 0)
	m = re.search(r"(\w+\(.*\))", first_line)
	return m.groups()[0]

def get_indent(str):
	first_line = get_line(str, 0)
	m = re.search(r"^(\s+)", first_line)
	return m.groups()[0]

def wrap_with_comment(str):
	name = get_php_function_name(str)
	signature = get_php_function_signature(str)
	indent = get_indent(str)
	vim_shiftwidth = int( snip.opt( 'shiftwidth', 2 ) )
	prepend_indent = indent[ 0 : len(indent)-vim_shiftwidth ]
	prepend = prepend_indent + '//{{{ ' + signature + '\n'
	#prepend = indent + '//{{{ ' + signature + '\n'
	append = indent + '//}}} _' + name
	str = prepend +  str + append
	return str

snip.rv = wrap_with_comment(snip.v.text)
`
endsnippet

snippet fnc "file Name Controller" w
`!p
fileName = snip.fn[13:-4]
parts = fileName.split('_')
fileName = ''.join(x.title() for x in parts[1:])
snip.rv=fileName
`
endsnippet

snippet fnt "file Name Test" w
`!p
fileName = snip.fn[25:-10]
snip.rv=fileName
`
endsnippet

snippet fn "File Name" w
`!p snip.rv=snip.basename`
endsnippet

snippet fne "File Name With extension"
`!p snip.rv=snip.fn`
endsnippet

snippet fnf "test Python" !b
`!p snip.rv=snip.fn`
endsnippet

snippet tp0 "test Python" !b
`!p snip.rv="Hello"`
endsnippet

snippet tp1 "test Python" !b
`!p import uuid
if not snip.c:
	snip.rv = uuid.uuid4().hex`
endsnippet

global !p
def complete(t, opts):
#if text of the tabstop is not empty
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if len(opts)==1:
		return opts[0]
	return "(" + '|'.join(opts) + ")"
endglobal

snippet tp2 "test Python Status Autocomplete" b
status $1`!p snip.rv = complete(t[1], ['Opt_First', 'Opt_Second', 'Opt_Third'])`
endsnippet

snippet '^ tp3' "test Python Regular Expression Trigger" r
status $1`!p snip.rv = complete(t[1], ['Opt_First', 'Opt_Second', 'Opt_Third'])`
endsnippet

snippet 'tp4 (\d+) (\w+)' "test Python Interpolation With RegEx trigger" r
`!p snip.rv=int(match.group(1))*match.group(2)`
endsnippet

################################################################################
#                               POSTFIX SNIPPETS                               #
################################################################################

snippet "(\S.*);p" "parenthesis postfix code" br
${1}(`!p snip.rv = match.group(1)`)
endsnippet

snippet "(\S.*);if" "if postfix code" br
if (${1:/* condition */}) {
	`!p snip.rv = match.group(1)`;${2}
}
endsnippet

snippet "(\S.*)\.if" "if postfix code" br
if (`!p snip.rv = match.group(1)`) {
	${1}
}
endsnippet

snippet "(\S.*);for" "for postfix code" br
for (${1}; ${2}; ${3}) {
	`!p snip.rv = match.group(1)`;${4}
}
endsnippet

snippet "(\S.*)\.for" "for postfix code" br
for (`!p snip.rv = match.group(1)`; ${1}; ${2}) {
	${3}
}
endsnippet

snippet "(\S.*);foreach" "foreach postfix code" br
foreach (\$${1:variable} as \$${2:value}) {
	`!p snip.rv = match.group(1)`;${3}
}
endsnippet

snippet "(\S.*)\.foreach" "foreach postfix code" br
foreach (`!p snip.rv = match.group(1)` as \$${1:value}) {
	${1}
}
endsnippet

snippet "(\S.*);foreachk" "foreach key/value postfix code" br
foreach (\$${1:variable} as \$${2:key} => \$${3:value}) {
	`!p snip.rv = match.group(1)`;${4}
}
endsnippet

snippet "(\S.*)\.foreachk" "foreach key/value postfix code" br
foreach (`!p snip.rv = match.group(1)` as \$${1:key} => \$${2:value}) {
	${3}
}
endsnippet

snippet "(\S.*);while" "while postfix code" br
while (${1:/* condition */}) {
	`!p snip.rv = match.group(1)`;${2}
}
endsnippet

snippet "(\S.*)\.while" "while postfix code" br
while (`!p snip.rv = match.group(1)`) {
	${1}
}
endsnippet

snippet "(\S.*);do" "do/while postfix code" br
do {
	`!p snip.rv = match.group(1)`;${2}
} while (${1:/* condition */});
endsnippet

snippet "(\S.*)\.do" "do/while postfix code" br
do {
	${1}
} while (`!p snip.rv = match.group(1)`);
endsnippet

snippet "(\S.*);try" "try/catch postfix code" br
try {
	`!p snip.rv = match.group(1)`;
} catch (${1:\Exception} \$${2:e}) {
	${3}
}
endsnippet

snippet "(\S.*);ret" "return postfix code" br
return `!p snip.rv = match.group(1)`;
endsnippet

snippet "(\S.*);echo" "echo postfix code" br
echo `!p snip.rv = match.group(1)`;
endsnippet

snippet "(\S.*);dump" "var_dump postfix code" br
var_dump(`!p snip.rv = match.group(1)`);
endsnippet

snippet "(\S.*);dd" "dd() postfix code" br
var_dump(`!p snip.rv = match.group(1)`);

snippet "(\S.*);die" "die postfix code" br
die(`!p snip.rv = match.group(1)`);
endsnippet

snippet tc "Test Case"
<?php

namespace Tests\Feature;

use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ${1:`!p
snip.rv = snip.basename or "untitled"`} extends TestCase
{
	/**
	 * A basic test example.
	 *
	 * @return void
	 */
	public function ${2:testExample}()
	{
		$0
	}
}
endsnippet

snippet ljoin "left join"
->join('${1}', '$1.id', '=', '${2}', 'LEFT OUTER')
endsnippet

snippet join "join"
->join('${1}', '$1.id', '${2}')
endsnippet

